// ROS message includes
#include "ros/ros.h"
[%
var str : String;
for (publisher in node.publisher)
{
    str = publisher.msg.replace('::','/');
%]
#include <[%=str%].h>
[%
}
%]
[%
var str : String;
for (subscriber in node.subscriber)
{
    str = subscriber.msg.replace('::','/');
%]
#include <[%=str%].h>
[%
}
%]
[%
var str : String;
for (serviceServer in node.serviceServer)
{
    str = serviceServer.msg.replace('::','/');
%]
#include <[%=str%].h>
[%
}
%]

[%=out.startPreserve("/*", "*/", "user include files", true)%]
[%=out.stopPreserve()%]

class [%=node.name.replace(" ", "_")%]_config
{
public:
    [%
    for (parameter in node.parameter)
    {
    if(parameter.type.toString() == "string"){
    %]
    std::[%=parameter.type.toString()%] [%=parameter.name.replace(" ", "_")%];
    [%
    }
    else{
    if(parameter.type.toString() == "XmlRpcValue"){
    %]
    XmlRpc::XmlRpcValue [%=parameter.name.replace(" ", "_")%];
    [%
    }
    else{
    %]
    [%=parameter.type%] [%=parameter.name.replace(" ", "_")%];
    [%
    }}
    }
    %]
};

class [%=node.name.replace(" ", "_")%]_data
{
// autogenerated: don't touch this class
public:
    //input data
    [%
    for (subscriber in node.subscriber)
    {
    %]
    [%=subscriber.msg%] in_[%=subscriber.name.replace(" ", "_")%];
    [%
    }
    %]
    //output data
    [%
    for (publisher in node.publisher)
    {
    %]
    [%=publisher.msg%] out_[%=publisher.name.replace(" ", "_")%];
    bool out_[%=publisher.name.replace(" ", "_")%]_active;
    [%
    }
    %]
};

class [%=node.name.replace(" ", "_")%]_impl
{
    [%=out.startPreserve("/*", "*/", "user member variables", true)%]
    [%=out.stopPreserve()%]

public:
    [%=node.name.replace(" ", "_")%]_impl() 
    {
        [%=out.startPreserve("/*", "*/", "user constructor", true)%]
        [%=out.stopPreserve()%]
    }

    void configure([%=node.name.replace(" ", "_")%]_config config) 
    {
        [%=out.startPreserve("/*", "*/", "user configure", true)%]
        [%=out.stopPreserve()%]
    }

    void update([%=node.name.replace(" ", "_")%]_data &data, [%=node.name.replace(" ", "_")%]_config config)
    {
        [%=out.startPreserve("/*", "*/", "user update", true)%]
        [%=out.stopPreserve()%]
    }

[%
for (subscriber in node.subscriber)
{
%]
    void topicCallback_[%=subscriber.name.replace(" ", "_")%](const [%=subscriber.msg%]::ConstPtr& msg)
    {
        [%=out.startPreserve("/*", "*/", "user implementation of subscribe callback for " + subscriber.name.replace(" ", "_"), true)%]
        [%=out.stopPreserve()%]
    }
[%
}
%]


[%
for (service_here in node.serviceServer)
{
%]
    bool callback_[%=service_here.name.replace(" ", "_")%]([%=service_here.msg%]::Request  &req, [%=service_here.msg%]::Response &res , [%=node.name.replace(" ", "_")%]_config config)
    {
        [%=out.startPreserve("/*", "*/", "user implementation of service callback for " + service_here.name.replace(" ", "_"), true)%]
        [%=out.stopPreserve()%]
        return true;
    }
[%
}
%]

[%
for (action in node.actionserver)
{
%]
    void callback_[%=action.name.replace(" ", "_")%]_(const [%=action.ActionType%]GoalConstPtr &goal, actionlib::SimpleActionServer<[%=action.ActionType%]Action> *as_)
    {
        [%=out.startPreserve("/*", "*/", "user implementation of action callback for " + action.name.replace(" ", "_"), true)%]
        [%=out.stopPreserve()%]
    }
[%
}
%]
    [%=out.startPreserve("/*", "*/", "user additional functions", true)%]
    [%=out.stopPreserve()%]
};
