// ROS message includes
#include "ros/ros.h"
#include <std_msgs/Float32.h>

/* protected region user include files on begin */
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdio.h>                                         // for in-/output
#include <string.h>                                        // strcat

//Include system headers
#include <cstring>
#include <iostream>
#include <cstdio>

#include <sstream>
#include <math.h>
#include <vector>
/* protected region user include files end */

class common_graph_dash_config
{
public:
    std::string address;
    std::string port;
    std::string type;
    std::string auth;
    std::string dash_topic;
    int number_points;
};

class common_graph_dash_data
{
// autogenerated: don't touch this class
public:
    //input data
    std_msgs::Float32 in_input;
    //output data
};

class common_graph_dash_impl
{
    /* protected region user member variables on begin */
	common_graph_dash_config localconfig;

	bool configured;
	std::list<double> values;
    /* protected region user member variables end */

public:
    common_graph_dash_impl() 
    {
        /* protected region user constructor on begin */
    	configured = false;
    	/* protected region user constructor end */
    }

    void configure(common_graph_dash_config config) 
    {
        /* protected region user configure on begin */
    	localconfig = config;
    	if(!configured)
    	{
    		uint32_t i;
    		for(i=0;i<localconfig.number_points;i++)
    		{
    			values.push_back(0.0);
    		}
    		configured = true;
    	}
        /* protected region user configure end */
    }

    void update(common_graph_dash_data &data, common_graph_dash_config config)
    {
        /* protected region user update on begin */
        /* protected region user update end */
    }

    void topicCallback_input(const std_msgs::Float32::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
    	char my_buff[4095];
    	char points_buff[2048];
    	uint32_t i = 1;

    	values.pop_front();
    	values.push_back(msg->data);

    	sprintf(points_buff, "[");
    	for (std::list<double>::iterator it = values.begin() ; it != values.end(); ++it)
		{
    		sprintf(points_buff, "%s{\"x\":%d,\"y\":%.1f}",points_buff,i,*it);
    		if(i<localconfig.number_points)
    		{
    			sprintf(points_buff, "%s,",points_buff);
    		}
    		i++;
		}
    	sprintf(points_buff, "%s]",points_buff);
    	//std::cout << points_buff << std::endl;

		sprintf(my_buff, "curl -d \'{ \"auth_token\": \"%s\", \"%s\": %s }' \\http://%s:%s/widgets/%s",
						localconfig.auth.c_str(),
						localconfig.type.c_str(),
						points_buff,
						localconfig.address.c_str(),
						localconfig.port.c_str(),
						localconfig.dash_topic.c_str());
		std::cout << my_buff << std::endl;
		system(my_buff);

		// curl -d '{ "auth_token": "YOUR_AUTH_TOKEN", "points": [{ "x": 1, "y": 25 },{ "x": 2, "y": 11 },{ "x": 3, "y": 32 }] }' \http://192.168.0.16:3030/widgets/convergence

		/* protected region user implementation of subscribe callback for input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
