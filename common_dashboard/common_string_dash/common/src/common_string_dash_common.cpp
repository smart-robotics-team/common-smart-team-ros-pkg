// ROS message includes
#include "ros/ros.h"
#include <std_msgs/String.h>

/* protected region user include files on begin */
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdio.h>                                         // for in-/output
#include <string.h>                                        // strcat

//Include system headers
#include <cstring>
#include <iostream>
#include <cstdio>

#include <sstream>
#include <math.h>
#include <vector>
/* protected region user include files end */

class common_string_dash_config
{
public:
    std::string address;
    std::string port;
    std::string type;
    std::string auth;
    std::string dash_topic;
};

class common_string_dash_data
{
// autogenerated: don't touch this class
public:
    //input data
    std_msgs::String in_input;
    //output data
};

class common_string_dash_impl
{
    /* protected region user member variables on begin */
	common_string_dash_config localconfig;


    /* protected region user member variables end */

public:
    common_string_dash_impl() 
    {
        /* protected region user constructor on begin */
        /* protected region user constructor end */
    }

    void configure(common_string_dash_config config) 
    {
        /* protected region user configure on begin */
    	localconfig = config;
        /* protected region user configure end */
    }

    void update(common_string_dash_data &data, common_string_dash_config config)
    {
        /* protected region user update on begin */
        /* protected region user update end */
    }

    void topicCallback_input(const std_msgs::String::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
    	char my_buff[256];
		sprintf(my_buff, "curl -d \'{ \"auth_token\": \"%s\", \"%s\": \"%s\" }' \\http://%s:%s/widgets/%s",
						localconfig.auth.c_str(),
						localconfig.type.c_str(),
						msg->data.c_str(),
						localconfig.address.c_str(),
						localconfig.port.c_str(),
						localconfig.dash_topic.c_str());
		std::cout << my_buff << std::endl;
		system(my_buff);
    	/* protected region user implementation of subscribe callback for input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
