// ROS message includes
#include "ros/ros.h"
#include <std_msgs/String.h>

/* protected region user include files on begin */
/* C includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <time.h>

/* C++ includes */
#include <iostream>
#include <string>
#include <list>

/* protected region user include files end */

class common_timeline_dash_config
{
public:
    std::string file_path;
};

class common_timeline_dash_data
{
// autogenerated: don't touch this class
public:
    //input data
    std_msgs::String in_input;
    //output data
};

class common_timeline_dash_impl
{
    /* protected region user member variables on begin */
	common_timeline_dash_config localconfig;
    /* protected region user member variables end */

public:
    common_timeline_dash_impl() 
    {
        /* protected region user constructor on begin */
        /* protected region user constructor end */
    }

    void configure(common_timeline_dash_config config) 
    {
        /* protected region user configure on begin */
    	localconfig = config;
        /* protected region user configure end */
    }

    void update(common_timeline_dash_data &data, common_timeline_dash_config config)
    {
        /* protected region user update on begin */
        /* protected region user update end */
    }

    void topicCallback_input(const std_msgs::String::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
    	char my_buff[256];
		char *name=new char[(msg->data).size()+1];
		char *date=new char[(msg->data).size()+1];
		char *color=new char[(msg->data).size()+1];
		name[(msg->data).size()] = 0;
		date[(msg->data).size()] = 0;
		color[(msg->data).size()] = 0;
		memcpy(name, (msg->data).c_str(), (msg->data).size());
		memcpy(date, (msg->data).c_str(), (msg->data).size());
		memcpy(color, (msg->data).c_str(), (msg->data).size());

		sprintf(my_buff, "echo \"  - name: \"%s\"\n    date: \"%s\"\n    background: \"%s\"\" >> %s", name, date, color, localconfig.file_path.c_str());
		std::cout << my_buff << std::endl;
		system(my_buff);

        /* protected region user implementation of subscribe callback for input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
