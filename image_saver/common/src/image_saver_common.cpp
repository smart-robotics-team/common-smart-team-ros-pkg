// ROS message includes
#include "ros/ros.h"
#include <std_msgs/String.h>
#include <std_msgs/Empty.h>
#include <sensor_msgs/Image.h>

/* protected region user include files on begin */
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>
/* protected region user include files end */

class image_saver_config
{
public:
    std::string save_path;
};

class image_saver_data
{
// autogenerated: don't touch this class
public:
    //input data
    std_msgs::Empty in_save_picture;
    sensor_msgs::Image in_video_input;
    //output data
    std_msgs::String out_save_done;
    bool out_save_done_active;
};

class image_saver_impl
{
    /* protected region user member variables on begin */
	image_saver_config local_config;
	sensor_msgs::Image::ConstPtr current_image;
	bool image_saved;
    /* protected region user member variables end */

public:
    image_saver_impl() 
    {
        /* protected region user constructor on begin */
    	image_saved = false;
        /* protected region user constructor end */
    }

    void configure(image_saver_config config) 
    {
        /* protected region user configure on begin */
    	local_config = config;
        /* protected region user configure end */
    }

    void update(image_saver_data &data, image_saver_config config)
    {
        /* protected region user update on begin */
    	data.out_save_done_active = image_saved;
    	if(image_saved)
    	{
    		data.out_save_done.data = local_config.save_path;
    		image_saved = false;
    	}
        /* protected region user update end */
    }

    void topicCallback_save_picture(const std_msgs::Empty::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for save_picture on begin */
    	cv_bridge::CvImagePtr cv_ptr;
		try
		{
			cv_ptr = cv_bridge::toCvCopy(current_image, sensor_msgs::image_encodings::BGR8);
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}

    	cv::imwrite( local_config.save_path, cv_ptr->image );
    	image_saved = true;
        /* protected region user implementation of subscribe callback for save_picture end */
    }
    void topicCallback_video_input(const sensor_msgs::Image::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for video_input on begin */
    	current_image = msg;
        /* protected region user implementation of subscribe callback for video_input end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
