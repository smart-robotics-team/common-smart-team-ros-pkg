// ROS message includes
#include "ros/ros.h"
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <nav_msgs/Odometry.h>

/* protected region user include files on begin */
#include <tf/transform_broadcaster.h>
#include <pcl/point_types.h>
#include <pcl/io/io.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/passthrough.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl_ros/transforms.h>
#include <pcl/segmentation/extract_clusters.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/filters/conditional_removal.h>

#include <stdlib.h>

#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#include <stdio.h>                                         // for in-/output
#include <string.h>                                        // strcat

//Include system headers
#include <cstring>
#include <iostream>
#include <cstdio>

#include <sstream>
#include <math.h>
#include <vector>
#include <list>
/* protected region user include files end */

class remove_self_pointcloud_config
{
public:
    double inhib_size;
};

class remove_self_pointcloud_data
{
// autogenerated: don't touch this class
public:
    //input data
    sensor_msgs::PointCloud2 in_input;
    nav_msgs::Odometry in_robot_position;
    //output data
    sensor_msgs::PointCloud2 out_output;
    bool out_output_active;
};

class remove_self_pointcloud_impl
{
    /* protected region user member variables on begin */
	remove_self_pointcloud_config localconfig;

	double robot_pose_x;
	double robot_pose_y;

	sensor_msgs::PointCloud2 output_pcloud2;
	bool output_ready;
    /* protected region user member variables end */

public:
    remove_self_pointcloud_impl() 
    {
        /* protected region user constructor on begin */
    	robot_pose_x = 0.0;
    	robot_pose_y = 0.0;
    	output_ready = false;
        /* protected region user constructor end */
    }

    void configure(remove_self_pointcloud_config config) 
    {
        /* protected region user configure on begin */
    	localconfig = config;
        /* protected region user configure end */
    }

    void update(remove_self_pointcloud_data &data, remove_self_pointcloud_config config)
    {
        /* protected region user update on begin */

    	data.out_output_active = output_ready;
		if(output_ready)
		{
			// Conversion from PCL to PointCloud2

			data.out_output = output_pcloud2;

			output_ready = false;
		}
		else
		{

		}

        /* protected region user update end */
    }

    void topicCallback_input(const sensor_msgs::PointCloud2::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input on begin */
		pcl::PCLPointCloud2::Ptr pcl_pc(new pcl::PCLPointCloud2 ());
		pcl::PointCloud<pcl::PointXYZ>::Ptr pcl_cloud (new pcl::PointCloud<pcl::PointXYZ>);
		pcl::PCLPointCloud2::Ptr cloud_out (new pcl::PCLPointCloud2 ());

		// Transformation into PCL type PointCloud2
		pcl_conversions::toPCL((*msg), *(pcl_pc));

		// Transformation into PCL type PointCloud<pcl::PointXYZRGB>
		pcl::fromPCLPointCloud2(*(pcl_pc), *(pcl_cloud));

		////////////////////////
		// PassThrough filter //
		////////////////////////


		pcl::ConditionOr<pcl::PointXYZ>::Ptr range_cond (new pcl::ConditionOr<pcl::PointXYZ> ());

		range_cond->addComparison (pcl::FieldComparison<pcl::PointXYZ>::ConstPtr (new
				pcl::FieldComparison<pcl::PointXYZ> ("x", pcl::ComparisonOps::GT, robot_pose_x+localconfig.inhib_size)));

		range_cond->addComparison (pcl::FieldComparison<pcl::PointXYZ>::ConstPtr (new
				pcl::FieldComparison<pcl::PointXYZ> ("x", pcl::ComparisonOps::LT, robot_pose_x-localconfig.inhib_size)));

		range_cond->addComparison (pcl::FieldComparison<pcl::PointXYZ>::ConstPtr (new
				pcl::FieldComparison<pcl::PointXYZ> ("y", pcl::ComparisonOps::GT, robot_pose_y+localconfig.inhib_size)));

		range_cond->addComparison (pcl::FieldComparison<pcl::PointXYZ>::ConstPtr (new
				pcl::FieldComparison<pcl::PointXYZ> ("y", pcl::ComparisonOps::LT, robot_pose_y-localconfig.inhib_size)));


		// build the filter
		pcl::ConditionalRemoval<pcl::PointXYZ> condrem (range_cond);
		condrem.setInputCloud (pcl_cloud);
		condrem.setKeepOrganized(true);
		// apply filter
		condrem.filter (*pcl_cloud);


		// Transformation into ROS type
		pcl::toPCLPointCloud2(*(pcl_cloud), *(cloud_out));
		pcl_conversions::moveFromPCL(*(cloud_out), output_pcloud2);

		output_ready = true;


        /* protected region user implementation of subscribe callback for input end */
    }
    void topicCallback_robot_position(const nav_msgs::Odometry::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for robot_position on begin */
    	robot_pose_x = msg->pose.pose.position.x;
    	robot_pose_y = msg->pose.pose.position.y;
        /* protected region user implementation of subscribe callback for robot_position end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
