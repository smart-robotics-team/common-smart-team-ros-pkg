// ROS message includes
#include "ros/ros.h"
#include <tf/transform_listener.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int8.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

/* protected region user include files on begin */
/* protected region user include files end */

class common_float_multiplexer_config
{
public:
    int starting_index;
};

class common_float_multiplexer_data
{
// autogenerated: don't touch this class
public:
    //input data
    std_msgs::Int8 in_index;
    std_msgs::Float32 in_input0;
    std_msgs::Float32 in_input1;
    std_msgs::Float32 in_input2;
    std_msgs::Float32 in_input3;
    //output data
    std_msgs::Float32 out_output;
    bool out_output_active;
};

class common_float_multiplexer_impl
{
    tf::TransformListener listener;
    /* protected region user member variables on begin */
    common_float_multiplexer_config local_config;
    int8_t current_index;
    std_msgs::Float32 current_output;

    bool do_output;
    /* protected region user member variables end */

public:
    common_float_multiplexer_impl() 
    {
        /* protected region user constructor on begin */
    	current_index = 0;
    	do_output = false;
        /* protected region user constructor end */
    }

    void configure(common_float_multiplexer_config config) 
    {
        /* protected region user configure on begin */
    	local_config = config;
    	current_index = config.starting_index;
        /* protected region user configure end */
    }

    void update(common_float_multiplexer_data &data, common_float_multiplexer_config config)
    {
        /* protected region user update on begin */
    	data.out_output_active = do_output;
    	data.out_output = current_output;

    	do_output = false;
        /* protected region user update end */
    }

    void topicCallback_index(const std_msgs::Int8::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for index on begin */
    	current_index = msg->data;
        /* protected region user implementation of subscribe callback for index end */
    }
    void topicCallback_input0(const std_msgs::Float32::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input0 on begin */
    	if(current_index == 0)
    	{
    		current_output = *msg;
    		do_output = true;
    	}
        /* protected region user implementation of subscribe callback for input0 end */
    }
    void topicCallback_input1(const std_msgs::Float32::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input1 on begin */
    	if(current_index == 1)
		{
			current_output = *msg;
			do_output = true;
		}
        /* protected region user implementation of subscribe callback for input1 end */
    }
    void topicCallback_input2(const std_msgs::Float32::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input2 on begin */
    	if(current_index == 2)
		{
			current_output = *msg;
			do_output = true;
		}
        /* protected region user implementation of subscribe callback for input2 end */
    }
    void topicCallback_input3(const std_msgs::Float32::ConstPtr& msg)
    {
        /* protected region user implementation of subscribe callback for input3 on begin */
    	if(current_index == 3)
		{
			current_output = *msg;
			do_output = true;
		}
        /* protected region user implementation of subscribe callback for input3 end */
    }



    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
